version: '3.8'

services:
  jupyterhub:
    build: "jupyterhub"
    depends_on:
      - database
      - jupyterhub-proxy
    restart: always
    container_name: jupyterhub_basic
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
      # Need this to create user directories
      - "/data/jupyterhub/:/data/jupyterhub/"
      - "/:/host_root/:ro"
    networks:
      - jupyterhub_step1
      - db
    environment:
      POSTGRES_DB: "jupyterhub"
      POSTGRES_HOST: database
    env_file: .env
    privileged: true # need this to be able to set quotas

  jupyterhub-proxy:
    image: "jupyterhub/configurable-http-proxy"
    restart: always
    container_name: "jupyterhub-proxy"
    networks:
      - jupyterhub_step1
    environment:
      VIRTUAL_HOST: "${JUPYTERHUB_VIRTUAL_HOST}"
      LETSENCRYPT_HOST: "${JUPYTERHUB_VIRTUAL_HOST}"
      VIRTUAL_PORT: "8000"
    env_file: .env

  projects-launcher:
    build: "projects-launcher"
    restart: always
    container_name: "projects-launcher"
    volumes:
      - "./projects.yaml:/srv/jupyterhub/projects.yaml"
    networks:
      - jupyterhub_step1
    environment:
      JUPYTERHUB_SERVICE_PREFIX: "/services/launcher/"
      JUPYTERHUB_API_TOKEN: "${LAUNCHER_API_TOKEN}"
      JUPYTERHUB_API_URL: "http://jupyterhub_basic:8081/hub/api"
    env_file: .env
  
  projects-orchestrator:
    build: "projects-orchestrator"
    restart: always
    container_name: "projects-orchestrator"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
      - "./projects.yaml:/wd/projects.yaml"
    networks:
      - jupyterhub_step1
    environment:
      JUPYTERHUB_SERVICE_PREFIX: "/services/launcher/"
      JUPYTERHUB_API_TOKEN: "${LAUNCHER_API_TOKEN}"
      JUPYTERHUB_API_URL: "http://jupyterhub_basic:8081/hub/api"
    env_file: .env

  database:
    image: "postgres:9.6"
    restart: always
    volumes:
      - "/data/jupyterhub/database/var/lib/postgresql/data:/var/lib/postgresql/data"
    networks:
      - db
    environment:
      POSTGRES_DB: "jupyterhub"
      PGDATA: "/var/lib/postgresql/data"
    env_file: .env

  # see https://linuxhandbook.com/nginx-reverse-proxy-docker/
  reverse-proxy:
    build: "reverse-proxy"
    container_name: "reverse-proxy"
    volumes:
      - "/data/reverse-proxy/usr/share/nginx/html:/usr/share/nginx/html"
      - "/data/reverse-proxy/etc/nginx/dhparam:/etc/nginx/dhparam"
      - "/data/reverse-proxy/etc/nginx/vhost.d:/etc/nginx/vhost.d"
      - "/data/reverse-proxy/etc/nginx/certs:/etc/nginx/certs"
      - "/var/run/docker.sock:/tmp/docker.sock:ro"
    networks: 
      - jupyterhub_step1
    ports:
      - "80:80"
      - "443:443"

  letsencrypt:
    image: "jrcs/letsencrypt-nginx-proxy-companion:latest"
    container_name: "letsencrypt-helper"
    volumes:
      - "/data/reverse-proxy/usr/share/nginx/html:/usr/share/nginx/html"
      - "/data/reverse-proxy/etc/nginx/dhparam:/etc/nginx/dhparam"
      - "/data/reverse-proxy/etc/nginx/vhost.d:/etc/nginx/vhost.d"
      - "/data/reverse-proxy/etc/nginx/certs:/etc/nginx/certs"
      - "/run/docker.sock:/var/run/docker.sock:ro"
    environment:
      NGINX_PROXY_CONTAINER: "reverse-proxy"
      DEFAULT_EMAIL: "${LETSENCRYPT_EMAIL}"
    depends_on:
      - "reverse-proxy"
    networks: 
      - jupyterhub_step1

  restic:
    build: "restic"
    environment:
        BACKUP_CRON: "0 0 * * * *"
        RESTIC_REPOSITORY: "sftp:${BACKUP_USER}@${BACKUP_SERVER}:${BACKUP_REPO_PATH}"
        RESTIC_BACKUP_SOURCES: "/source"
    volumes:
        - "/data/jupyterhub/:/source/data/jupyterhub/:ro"
        - "./restic/ssh/:/tmp/.ssh/:ro"
    env_file: .env

  # Monitoring

  statsd-exporter:
    image: "prom/statsd-exporter"
#    volumes:
#      - "./statsd/statsd.conf:/statsd/statsd.conf"
#    command:
#      - "--statsd.mapping-config=/statsd/statsd.conf"
    networks:
      - jupyterhub_step1

  prometheus:
    image: "prom/prometheus"
    volumes:
#      - "/data/jupyterhub/prometheus/prometheus:/prometheus"
      - "./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro"
#    ports:
#      - "127.0.0.1:8020:9090"
    networks:
      - jupyterhub_step1

  grafana:
    image: grafana/grafana
    volumes:
#      - "/data/backup-service/grafana/var/lib/grafana:/var/lib/grafana"
      - "./grafana/dashboards:/dashboards"
      - "./grafana/grafana.ini:/etc/grafana/grafana.ini"
    environment:
      - GF_USERS_DEFAULT_THEME=light
      - GF_USERS_ALLOW_SIGN_UP=true
    ports:
      - "127.0.0.1:8020:3000"
    networks:
      - jupyterhub_step1

# force the network name to be "jupyterhub"
# this needs to be matched in jupyterhub_config.py by:
# c.DockerSpawner.network_name = 'jupyterhub'
networks:
  jupyterhub_step1:
    driver: bridge
    name: net_basic
  db:
